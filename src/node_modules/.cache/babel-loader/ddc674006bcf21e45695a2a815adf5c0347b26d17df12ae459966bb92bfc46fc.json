{"ast":null,"code":"import axios from 'axios';\nexport const geocodeAddress = async address => {\n  try {\n    const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=YOUR_API_KEY`);\n    if (response.data.results.length > 0) {\n      const {\n        lat,\n        lng\n      } = response.data.results[0].geometry.location;\n      return {\n        latitude: lat,\n        longitude: lng\n      };\n    } else {\n      throw new Error('No results found');\n    }\n  } catch (error) {\n    throw new Error('Geocoding failed');\n  }\n};","map":{"version":3,"names":["axios","geocodeAddress","address","response","get","encodeURIComponent","data","results","length","lat","lng","geometry","location","latitude","longitude","Error","error"],"sources":["/home/abinesh/project/job-seeker/src/pages/parttimer/my-jobs-tabs/GeocodingService.js"],"sourcesContent":["import axios from 'axios';\n\nexport const geocodeAddress = async (address) => {\n  try {\n    const response = await axios.get(\n      `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(\n        address\n      )}&key=YOUR_API_KEY`\n    );\n\n    if (response.data.results.length > 0) {\n      const { lat, lng } = response.data.results[0].geometry.location;\n      return { latitude: lat, longitude: lng };\n    } else {\n      throw new Error('No results found');\n    }\n  } catch (error) {\n    throw new Error('Geocoding failed');\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAO,IAAK;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAC9B,6DAA6DC,kBAAkB,CAC7EH,OACF,CAAC,mBACH,CAAC;IAED,IAAIC,QAAQ,CAACG,IAAI,CAACC,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MACpC,MAAM;QAAEC,GAAG;QAAEC;MAAI,CAAC,GAAGP,QAAQ,CAACG,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACI,QAAQ,CAACC,QAAQ;MAC/D,OAAO;QAAEC,QAAQ,EAAEJ,GAAG;QAAEK,SAAS,EAAEJ;MAAI,CAAC;IAC1C,CAAC,MAAM;MACL,MAAM,IAAIK,KAAK,CAAC,kBAAkB,CAAC;IACrC;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAID,KAAK,CAAC,kBAAkB,CAAC;EACrC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}